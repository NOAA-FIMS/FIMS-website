---
---


```{r}
library(gh)
library(purrr)
library(tibble)
library(dplyr)

org <- "NOAA-FIMS"

# 1. List all repos
repos <- gh("/orgs/{org}/repos", org = org, .limit = Inf)
repo_names <- vapply(repos, function(x) x$name, character(1))

results <- map_dfr(repo_names, function(repo) {
  # Get default branch
  branch <- tryCatch({
    gh("/repos/{owner}/{repo}", owner = org, repo = repo)$default_branch
  }, error = function(e) "main")
  
  # List files recursively
  tree <- tryCatch({
    gh("/repos/{owner}/{repo}/git/trees/{tree_sha}?recursive=1",
       owner = org,
       repo = repo,
       tree_sha = branch)
  }, error = function(e) NULL)
  
  pkgdown_exists <- FALSE
  pkgdown_path <- NA
  if (!is.null(tree) && !is.null(tree$tree)) {
    pkgdown_files <- vapply(tree$tree, function(file) file$path, character(1))
    idx <- grep("pkgdown.yml$", pkgdown_files)
    if (length(idx) > 0) {
      pkgdown_exists <- TRUE
      pkgdown_path <- pkgdown_files[idx[1]]
    }
  }
  
  # Check for GitHub Pages and get site URL
  pages <- tryCatch({
    gh("/repos/{owner}/{repo}/pages", owner = org, repo = repo)
  }, error = function(e) NULL)
  
  pages_enabled <- !is.null(pages)
  pages_source_docs <- FALSE
  pages_url <- NA
  if (pages_enabled && !is.null(pages)) {
    pages_source_docs <- !is.null(pages$source) && pages$source$path == "docs"
    # Get the site's HTML URL if present
    if (!is.null(pages$html_url)) {
      pages_url <- pages$html_url
    }
  }
  
  tibble(
    repo = repo,
    has_pkgdown = pkgdown_exists,
    pkgdown_path = pkgdown_path,
    pages_enabled = pages_enabled,
    pages_source_docs = pages_source_docs,
    github_pages_url = pages_url
  )
})

results_filt <- results |>
  dplyr::filter(has_pkgdown == TRUE)

md_links <- paste0("[", filtered$repo, "](", filtered$github_pages_url, ")")

cat(md_links, sep = "\n")

sites <- readLines("sites/sites_index.qmd")
for (i in seq_len(nrow(results))) {
  site <- results$github_pages_url[i]
  repo <- results$repo[i]
  # Search for the site URL in the file
  found <- any(grepl(site, lines, fixed = TRUE))
  if (!is.na(site) && !found) {
    # Format new line
    new_line <- sprintf("- path: %s title: %s", site, repo)
    # Optional: Add at end, or find a section to insert
    lines <- c(lines, new_line)
  }
}

writeLines(lines, sites_file)
```